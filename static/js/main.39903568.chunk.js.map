{"version":3,"sources":["context/DBContext.js","components/BackButton.js","components/Button/styled.js","components/Button/Button.js","components/Input/styled.js","components/Input/Input.js","pages/Budget/styled.js","pages/Budget/Budget.js","components/Layout/Layout.js","pages/Category/styled.js","pages/Category/Category.js","pages/Category/NewCategory.js","components/CategoryGrid/styled.js","components/CategoryGrid/CategoryGrid.js","styled/GlobalStyle.js","pages/Dashboard/styled.js","pages/Dashboard/Dashboard.js","hooks/usePrevious.js","pages/NewBudget/styled.js","pages/NewBudget/NewBudget.js","pages/NewTransaction/styled.js","pages/NewTransaction/NewTransaction.js","pages/Transactions/styled.js","pages/Transactions/Transactions.js","pages/TransactionsDay/styled.js","pages/TransactionsDay/TransactionsDay.js","AppRouter.js","serviceWorker.js","index.js"],"names":["DBStateContext","createContext","DBDispatchContext","convertData","categories","dispatch","meta","id","category","budget","assets","console","log","budgets","Object","keys","map","sort","a","b","Date","date","lastBudget","length","amount","i","currBudget","nextBudget","differenceInCalendarMonths","startOfMonth","transactions","transaction","type","payload","reducer","state","action","DBContextProvider","children","useReducer","useEffect","localforage","getItem","then","Provider","value","useDBState","useContext","useDBDispatch","BackButtonContainer","styled","div","BackButton","className","history","useHistory","onClick","goBack","StyledButton","button","props","variant","css","Button","InputContainer","row","Input","name","label","onChange","onBlur","placeholder","htmlFor","BudgetPageContainer","BudgetForm","form","Budget","params","useParams","categoryId","budgetId","useFormik","initialValues","onSubmit","data","setItem","values","handleChange","setFormikState","handleSubmit","format","event","persist","target","isAfter","alert","find","style","width","Row","justifyContent","alignItems","wrap","Column","CategoryContainer","CategoryForm","BudgetContainer","SectionTitle","Category","newBudgets","newCategories","_categories","setFieldValue","handleRemoveBudget","useCallback","window","confirm","filter","_budget","handleRemoveCategory","push","key","textAlign","flex","NewCategory","startMonth","uuid","_category","startOfDay","CategoryGridContainer","CategoryGridCell","CategoryText","CategoryAmountLeft","sign","CategoryBudget","CategoryTable","number","toLocaleString","Math","round","String","GlobalStyle","createGlobalStyle","CenterText","DashboardContainer","GridContainer","Dashboard","useState","income","setIncome","monthlyExpenses","useMemo","expenses","forEach","_income","CategoryGrid","backgroundColor","padding","paddingBottom","usePrevious","ref","useRef","current","NewBudget","prevCategory","addMonths","TransactionPageContainer","TransactionForm","NewTransaction","description","marginBottom","fontWeight","autoFocus","TransactionsContainer","TransactionsTable","table","Transactions","transactionsPerDay","transactionsMap","day","undefined","totalAmount","handleDeleteTransaction","transactionId","paddingTop","borderBottom","colSpan","index","TransactionsDay","setDate","transactionsInDate","isSameDay","categoryName","_transaction","overflowY","marginTop","marginRight","addDays","AppRouter","exact","path","component","to","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.39903568.chunk.js","sourcesContent":["import { differenceInCalendarMonths, startOfMonth } from 'date-fns/esm';\r\nimport localforage from 'localforage';\r\nimport React, { createContext, useContext, useEffect, useReducer } from 'react';\r\n\r\nconst DBStateContext = createContext();\r\nconst DBDispatchContext = createContext();\r\n\r\nexport const convertData = (categories, dispatch) => {\r\n  const meta = {};\r\n  for (const id in categories) {\r\n    const category = categories[id];\r\n\r\n    meta[id] = {\r\n      budget: 0,\r\n      assets: 0,\r\n    };\r\n    console.log(category);\r\n\r\n    const budgets = Object.keys(category.budgets)\r\n      .map(id => category.budgets[id])\r\n      .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n    const lastBudget = budgets[budgets.length - 1];\r\n    meta[id].budget = lastBudget.amount;\r\n\r\n    for (let i = 0; i < budgets.length; i++) {\r\n      const currBudget = budgets[i];\r\n      const nextBudget = budgets[i + 1];\r\n      if (nextBudget) {\r\n        meta[id].assets +=\r\n          differenceInCalendarMonths(nextBudget.date, currBudget.date) *\r\n          currBudget.amount;\r\n      } else {\r\n        meta[id].assets +=\r\n          (differenceInCalendarMonths(\r\n            startOfMonth(new Date()),\r\n            currBudget.date\r\n          ) +\r\n            1) *\r\n          currBudget.amount;\r\n      }\r\n    }\r\n\r\n    for (const transaction of category.transactions) {\r\n      meta[id].assets -= transaction.amount;\r\n    }\r\n  }\r\n\r\n  dispatch({ type: 'SET_META', payload: meta });\r\n  dispatch({ type: 'SET_CATEGORIES', payload: categories });\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_CATEGORY': {\r\n      return {\r\n        ...state,\r\n        categories: {\r\n          ...state.categories,\r\n          [action.payload.id]: action.payload,\r\n        },\r\n      };\r\n    }\r\n\r\n    case 'SET_CATEGORIES': {\r\n      return { ...state, categories: action.payload };\r\n    }\r\n\r\n    case 'SET_META': {\r\n      return { ...state, meta: action.payload };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const DBContextProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    categories: {},\r\n    meta: {},\r\n  });\r\n\r\n  useEffect(() => {\r\n    // localforage.clear();\r\n    localforage.getItem('categories').then(categories => {\r\n      if (categories) {\r\n        convertData(categories, dispatch);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <DBStateContext.Provider value={state}>\r\n      <DBDispatchContext.Provider value={dispatch}>\r\n        {children}\r\n      </DBDispatchContext.Provider>\r\n    </DBStateContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useDBState = () => {\r\n  return useContext(DBStateContext);\r\n};\r\n\r\nexport const useDBDispatch = () => {\r\n  return useContext(DBDispatchContext);\r\n};\r\n","import React from 'react';\r\nimport { FaChevronLeft } from 'react-icons/fa';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components/macro';\r\n\r\nexport const BackButtonContainer = styled.div`\r\n  button {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: 1rem;\r\n\r\n    svg {\r\n      margin-right: 0.5rem;\r\n    }\r\n\r\n    div {\r\n      position: relative;\r\n      top: 0.05rem;\r\n    }\r\n  }\r\n`;\r\n\r\nconst BackButton = ({ className }) => {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <BackButtonContainer className={className}>\r\n      <button type=\"button\" onClick={() => history.goBack()}>\r\n        <FaChevronLeft />\r\n        <div>Back</div>\r\n      </button>\r\n    </BackButtonContainer>\r\n  );\r\n};\r\n\r\nexport default BackButton;\r\n","import styled, { css } from 'styled-components/macro';\r\n\r\nexport const StyledButton = styled.button`\r\n  padding: 0.5rem;\r\n  background-color: #42a5f5;\r\n  color: white;\r\n  text-align: center;\r\n\r\n  ${props => {\r\n    if (props.variant === 'negative') {\r\n      return css`\r\n        background-color: #ef5350;\r\n      `;\r\n    }\r\n  }}\r\n`;\r\n","import React from 'react';\r\nimport { StyledButton } from './styled';\r\n\r\nconst Button = ({ className, children, ...props }) => {\r\n  return (\r\n    <StyledButton className={className} {...props}>\r\n      {children}\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import styled, { css } from 'styled-components/macro';\r\n\r\nexport const InputContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 1rem;\r\n\r\n  &:last-child {\r\n    margin-bottom: 0;\r\n  }\r\n\r\n  ${props =>\r\n    props.row &&\r\n    css`\r\n      flex: 1;\r\n      flex-direction: row;\r\n      margin-bottom: 0;\r\n      justify-content: space-between;\r\n    `}\r\n\r\n  label {\r\n    width: 100%;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n\r\n  input {\r\n    width: 100%;\r\n    padding: 0.25rem;\r\n    border-bottom: 1px solid #e0e0e0;\r\n    color: #424242;\r\n  }\r\n\r\n  ${props =>\r\n    props.type === 'number' &&\r\n    css`\r\n      input {\r\n        text-align: right;\r\n      }\r\n    `}\r\n`;\r\n","import React from 'react';\r\nimport { InputContainer } from './styled';\r\n\r\nconst Input = ({\r\n  name,\r\n  label,\r\n  value,\r\n  onChange,\r\n  onBlur,\r\n  type = 'text',\r\n  placeholder,\r\n  row = false,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <InputContainer row={row} type={type}>\r\n      <label htmlFor={name}>{label}</label>\r\n      <input\r\n        name={name}\r\n        type={type}\r\n        value={value}\r\n        onChange={onChange}\r\n        onBlur={onBlur}\r\n        placeholder={placeholder}\r\n        {...props}\r\n      />\r\n    </InputContainer>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import styled from 'styled-components/macro';\r\n\r\nexport const BudgetPageContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const BudgetForm = styled.form`\r\n  padding: 0.5rem;\r\n  background-color: #f5f5f5;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  form {\r\n    flex: 1;\r\n  }\r\n`;\r\n","import BackButton from 'components/BackButton';\r\nimport Button from 'components/Button';\r\nimport Input from 'components/Input';\r\nimport { convertData, useDBDispatch, useDBState } from 'context/DBContext';\r\nimport { format, isAfter } from 'date-fns';\r\nimport { useFormik } from 'formik';\r\nimport localforage from 'localforage';\r\nimport React, { useEffect } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { BudgetForm, BudgetPageContainer } from './styled';\r\n\r\nconst Budget = () => {\r\n  const params = useParams();\r\n  const history = useHistory();\r\n  const { categories } = useDBState();\r\n  const dispatch = useDBDispatch();\r\n\r\n  const category = categories[params.categoryId];\r\n  const budget = category ? category.budgets[params.budgetId] : null;\r\n\r\n  const { values, handleChange, setFormikState, handleSubmit } = useFormik({\r\n    initialValues: { date: new Date(), amount: '' },\r\n    onSubmit: data => {\r\n      localforage\r\n        .setItem('categories', {\r\n          ...categories,\r\n          [params.categoryId]: {\r\n            ...category,\r\n            budgets: {\r\n              [params.budgetId]: {\r\n                ...budget,\r\n                amount: +data.amount,\r\n                date: new Date(data.date),\r\n              },\r\n            },\r\n          },\r\n        })\r\n        .then(categories => {\r\n          convertData(categories, dispatch);\r\n          history.goBack();\r\n        });\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!!category && !!budget) {\r\n      setFormikState({\r\n        values: {\r\n          date: format(new Date(budget.date), 'yyyy-MM'),\r\n          amount: budget.amount,\r\n        },\r\n      });\r\n    }\r\n  }, [budget, category, setFormikState]);\r\n\r\n  return (\r\n    <BudgetPageContainer>\r\n      <BudgetForm>\r\n        <BackButton />\r\n        <Input\r\n          type=\"month\"\r\n          label=\"Month\"\r\n          name=\"date\"\r\n          value={values.date}\r\n          onChange={event => {\r\n            event.persist();\r\n            const value = event.target.value;\r\n            if (isAfter(new Date(value), new Date())) {\r\n              return alert('Cannot assign budget to date before today');\r\n            }\r\n\r\n            const existing = Object.keys(category.budgets).find(\r\n              id =>\r\n                format(new Date(category.budgets[id].date), 'yyyy-MM') ===\r\n                  value && id !== budget.id\r\n            );\r\n            if (existing) {\r\n              alert('Budget for that month already allocated');\r\n            } else {\r\n              handleChange(event);\r\n            }\r\n          }}\r\n        />\r\n        <Input\r\n          type=\"number\"\r\n          label=\"Amount\"\r\n          name=\"amount\"\r\n          value={values.amount}\r\n          onChange={handleChange}\r\n        />\r\n      </BudgetForm>\r\n      <Button type=\"button\" onClick={handleSubmit} style={{ width: '100%' }}>\r\n        Edit Budget\r\n      </Button>\r\n    </BudgetPageContainer>\r\n  );\r\n};\r\n\r\nexport default Budget;\r\n","import styled from 'styled-components/macro';\r\n\r\nexport const Row = styled.div`\r\n  display: flex;\r\n  justify-content: ${props => props.justifyContent};\r\n  align-items: ${props => props.alignItems};\r\n  flex-wrap: ${props => props.wrap || 'wrap'};\r\n`;\r\n\r\nexport const Column = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: ${props => props.justifyContent};\r\n  align-items: ${props => props.alignItems};\r\n`;\r\n","import { Column, Row } from 'components/Layout';\r\nimport styled from 'styled-components/macro';\r\n\r\nexport const CategoryContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const CategoryForm = styled.form`\r\n  padding: 0.5rem;\r\n  background-color: #f5f5f5;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  form {\r\n    flex: 1;\r\n  }\r\n`;\r\n\r\nexport const Title = styled(Row)`\r\n  align-items: center;\r\n  margin-bottom: 1rem;\r\n\r\n  button {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-right: 1rem;\r\n  }\r\n\r\n  h6 {\r\n    line-height: 1;\r\n  }\r\n`;\r\n\r\nexport const BudgetContainer = styled(Row)`\r\n  align-items: center;\r\n  margin-bottom: 1rem;\r\n\r\n  div {\r\n    flex: 1;\r\n  }\r\n\r\n  button {\r\n    margin-left: 1rem;\r\n  }\r\n`;\r\n\r\nexport const BudgetInputContainer = styled(Column)`\r\n  border-bottom: 0.2rem solid #bdbdbd;\r\n  position: relative;\r\n  padding-bottom: 1rem;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nexport const SectionTitle = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 1rem;\r\n\r\n  button {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n","import BackButton from 'components/BackButton';\r\nimport Button from 'components/Button';\r\nimport Input from 'components/Input';\r\nimport { Row } from 'components/Layout';\r\nimport { convertData, useDBDispatch, useDBState } from 'context/DBContext';\r\nimport { format } from 'date-fns';\r\nimport { useFormik } from 'formik';\r\nimport localforage from 'localforage';\r\nimport React, { useCallback, useEffect } from 'react';\r\nimport { FaPen, FaPlusCircle, FaTimes } from 'react-icons/fa';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport {\r\n  BudgetContainer,\r\n  CategoryContainer,\r\n  CategoryForm,\r\n  SectionTitle,\r\n} from './styled';\r\n\r\nconst Category = () => {\r\n  const params = useParams();\r\n  const history = useHistory();\r\n  const { categories } = useDBState();\r\n  const dispatch = useDBDispatch();\r\n\r\n  const category = categories[params.id];\r\n\r\n  const {\r\n    values,\r\n    handleChange,\r\n    setFieldValue,\r\n    setFormikState,\r\n    handleSubmit,\r\n  } = useFormik({\r\n    initialValues: { name: '', budgets: [] },\r\n    onSubmit: data => {\r\n      if (!data.name) {\r\n        return alert('Must have name');\r\n      }\r\n      const newBudgets = { ...category.budgets };\r\n\r\n      for (const budgetId in newBudgets) {\r\n        if (!data.budgets.find(budget => budget.id === budgetId)) {\r\n          delete newBudgets[budgetId];\r\n        }\r\n      }\r\n\r\n      const newCategories = {\r\n        ...categories,\r\n        [params.id]: {\r\n          ...category,\r\n          name: data.name,\r\n          budgets: newBudgets,\r\n        },\r\n      };\r\n\r\n      localforage.setItem('categories', newCategories).then(_categories => {\r\n        convertData(_categories, dispatch);\r\n        history.goBack();\r\n      });\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (category) {\r\n      const budgets = Object.keys(category.budgets)\r\n        .map(id => ({\r\n          ...category.budgets[id],\r\n          date: format(new Date(category.budgets[id].date), 'yyyy-MM'),\r\n        }))\r\n        .sort((a, b) => new Date(b.date) - new Date(a.date));\r\n\r\n      setFormikState({ values: { name: category.name, budgets } });\r\n    }\r\n  }, [category, setFormikState]);\r\n\r\n  const handleRemoveBudget = useCallback(\r\n    budget => {\r\n      if (\r\n        window.confirm('Are you sure you want to delete this budget entry?')\r\n      ) {\r\n        setFieldValue(\r\n          'budgets',\r\n          values.budgets.filter(_budget => _budget.id !== budget.id)\r\n        );\r\n      }\r\n    },\r\n    [setFieldValue, values.budgets]\r\n  );\r\n\r\n  const handleRemoveCategory = useCallback(() => {\r\n    if (window.confirm('Are you sure want to delete this category?')) {\r\n      const newCategories = { ...categories };\r\n      delete newCategories[params.id];\r\n      localforage.setItem('categories', newCategories).then(_categories => {\r\n        convertData(_categories, dispatch);\r\n        history.goBack();\r\n      });\r\n    }\r\n  }, [categories, dispatch, history, params.id]);\r\n\r\n  if (!category) return null;\r\n\r\n  return (\r\n    <CategoryContainer>\r\n      <CategoryForm>\r\n        <BackButton />\r\n        <Input\r\n          label=\"Name\"\r\n          name=\"name\"\r\n          value={values.name}\r\n          onChange={handleChange}\r\n        />\r\n        <SectionTitle>\r\n          <h6>Budgets</h6>\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => history.push(`/category/${params.id}/budget`)}\r\n          >\r\n            <FaPlusCircle />\r\n          </button>\r\n        </SectionTitle>\r\n        {values.budgets.map(budget => (\r\n          <BudgetContainer key={budget.id}>\r\n            <div>{format(new Date(budget.date), 'MMM yyyy')}</div>\r\n            <div style={{ textAlign: 'right' }}>{budget.amount}</div>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() =>\r\n                history.push(`/category/${category.id}/budget/${budget.id}`)\r\n              }\r\n            >\r\n              <FaPen />\r\n            </button>\r\n            {values.budgets.length > 1 && (\r\n              <button type=\"button\" onClick={() => handleRemoveBudget(budget)}>\r\n                <FaTimes />\r\n              </button>\r\n            )}\r\n          </BudgetContainer>\r\n        ))}\r\n      </CategoryForm>\r\n      <Row>\r\n        <Button\r\n          variant=\"negative\"\r\n          type=\"button\"\r\n          onClick={handleRemoveCategory}\r\n          style={{ flex: 1 }}\r\n        >\r\n          Remove Category\r\n        </Button>\r\n        <Button type=\"button\" onClick={handleSubmit} style={{ flex: 1 }}>\r\n          Edit Category\r\n        </Button>\r\n      </Row>\r\n    </CategoryContainer>\r\n  );\r\n};\r\n\r\nexport default Category;\r\n","import BackButton from 'components/BackButton';\r\nimport Button from 'components/Button';\r\nimport Input from 'components/Input';\r\nimport { convertData, useDBDispatch, useDBState } from 'context/DBContext';\r\nimport { format } from 'date-fns';\r\nimport { startOfDay } from 'date-fns/esm';\r\nimport { useFormik } from 'formik';\r\nimport localforage from 'localforage';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport uuid from 'uuid/v4';\r\nimport { CategoryContainer, CategoryForm } from './styled';\r\n\r\nconst NewCategory = () => {\r\n  const history = useHistory();\r\n  const dispatch = useDBDispatch();\r\n  const { categories } = useDBState();\r\n\r\n  const { values, handleChange, handleSubmit } = useFormik({\r\n    initialValues: {\r\n      name: '',\r\n      budget: '',\r\n      startMonth: format(new Date(), 'yyyy-MM'),\r\n    },\r\n\r\n    onSubmit: data => {\r\n      if (!data.name) {\r\n        return alert('Must have name');\r\n      }\r\n      const budgetId = uuid();\r\n      const _category = {\r\n        id: uuid(),\r\n        name: data.name,\r\n        budgets: {\r\n          [budgetId]: {\r\n            id: budgetId,\r\n            date: startOfDay(new Date(data.startMonth)),\r\n            amount: +data.budget,\r\n          },\r\n        },\r\n        transactions: [],\r\n      };\r\n\r\n      localforage\r\n        .setItem('categories', {\r\n          ...categories,\r\n          [_category.id]: _category,\r\n        })\r\n        .then(data => {\r\n          convertData(data, dispatch);\r\n          history.goBack();\r\n        });\r\n    },\r\n  });\r\n\r\n  return (\r\n    <CategoryContainer>\r\n      <CategoryForm>\r\n        <BackButton />\r\n        <Input\r\n          label=\"Name\"\r\n          name=\"name\"\r\n          value={values.name}\r\n          onChange={handleChange}\r\n        />\r\n        <Input\r\n          label=\"Budget\"\r\n          type=\"number\"\r\n          name=\"budget\"\r\n          value={values.budget}\r\n          onChange={handleChange}\r\n        />\r\n        <Input\r\n          label=\"Start Month\"\r\n          type=\"month\"\r\n          name=\"startMonth\"\r\n          value={values.startMonth}\r\n          onChange={handleChange}\r\n        />\r\n      </CategoryForm>\r\n      <Button type=\"button\" onClick={handleSubmit} style={{ width: '100%' }}>\r\n        Create Category\r\n      </Button>\r\n    </CategoryContainer>\r\n  );\r\n};\r\n\r\nexport default NewCategory;\r\n","import styled, { css } from 'styled-components/macro';\r\n\r\nexport const CategoryGridContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto auto;\r\n`;\r\n\r\nexport const CategoryGridCell = styled.div`\r\n  background-color: #f5f5f5;\r\n  padding: 0.5rem;\r\n  border-bottom: 0.1rem solid #e0e0e0;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const CategoryText = styled(CategoryGridCell)``;\r\n\r\nexport const CategoryAmountLeft = styled(CategoryGridCell)`\r\n  text-align: right;\r\n  ${({ sign }) => {\r\n    if (sign === 'positive')\r\n      return css`\r\n        color: #66bb6a;\r\n      `;\r\n    if (sign === 'negative')\r\n      return css`\r\n        color: #ef5350;\r\n      `;\r\n    if (sign === 'zero')\r\n      return css`\r\n        color: #bdbdbd;\r\n      `;\r\n  }}\r\n`;\r\n\r\nexport const CategoryBudget = styled(CategoryGridCell)`\r\n  color: #42a5f5;\r\n  text-align: right;\r\n`;\r\n","import { useDBState } from 'context/DBContext';\r\nimport React, { Fragment } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n  CategoryAmountLeft,\r\n  CategoryBudget,\r\n  CategoryGridContainer,\r\n  CategoryText,\r\n} from './styled';\r\n\r\nconst getSign = number => {\r\n  if (number > 0) return 'positive';\r\n  if (number < 0) return 'negative';\r\n  return 'zero';\r\n};\r\n\r\nconst CategoryTable = () => {\r\n  const history = useHistory();\r\n  const { categories, meta } = useDBState();\r\n\r\n  return (\r\n    <CategoryGridContainer>\r\n      {Object.keys(categories).map(id => {\r\n        const { name } = categories[id];\r\n        const { assets, budget } = meta[id];\r\n\r\n        return (\r\n          <Fragment key={id}>\r\n            <CategoryText>\r\n              <span onClick={() => history.push(`/category/${id}`)}>\r\n                {name}\r\n              </span>\r\n            </CategoryText>\r\n            <CategoryAmountLeft sign={getSign(assets)}>\r\n              <span onClick={() => history.push(`/category/${id}/transaction`)}>\r\n                {assets > 0 && '+'}\r\n                {assets.toLocaleString()} [\r\n                {Math.round((assets / (budget || 1)) * 100)}%]\r\n              </span>\r\n            </CategoryAmountLeft>\r\n            <CategoryBudget>\r\n              <span\r\n                onClick={() => history.push(`/category/${id}/transactions`)}\r\n              >\r\n                {String(budget).toLocaleString()}\r\n              </span>\r\n            </CategoryBudget>\r\n          </Fragment>\r\n        );\r\n      })}\r\n    </CategoryGridContainer>\r\n  );\r\n};\r\n\r\nexport default CategoryTable;\r\n","import styled, { createGlobalStyle } from 'styled-components/macro';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  /* @import url('https://rsms.me/inter/inter.css');*/\r\n  html {\r\n    font-size: 16px;\r\n    height: 100%;\r\n  }\r\n\r\n  body {\r\n    margin: 0;\r\n    font-family: 'Inter', sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    background-color: #E0E0E0;\r\n    color: #212121;\r\n    height: 100%;\r\n  }\r\n\r\n  #root {\r\n    height: 100%;\r\n  }\r\n\r\n  code {\r\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\r\n      monospace;\r\n  }\r\n\r\n  h1,\r\n  h2,\r\n  h3,\r\n  h4,\r\n  h5,\r\n  h6 {\r\n    font-weight: bold;\r\n  }\r\n\r\n  h1 {\r\n    font-size: 2rem;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 1.832rem;\r\n  }\r\n\r\n  h3 {\r\n    font-size: 1.666rem;\r\n  }\r\n\r\n  h4 {\r\n    font-size: 1.5rem;\r\n  }\r\n\r\n  h5 {\r\n    font-size: 1.322rem;\r\n  }\r\n\r\n  h6 {\r\n    font-size: 1.116rem;\r\n  }\r\n`;\r\n\r\nexport const CenterText = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100%;\r\n  width: 100%;\r\n  text-align: center;\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import { Column } from 'components/Layout';\r\nimport styled from 'styled-components/macro';\r\n\r\nexport const DashboardContainer = styled(Column)`\r\n  height: 100%;\r\n`;\r\n\r\nexport const GridContainer = styled.div`\r\n  flex: 1;\r\n`;\r\n","import Button from 'components/Button';\r\nimport CategoryGrid from 'components/CategoryGrid';\r\nimport Input from 'components/Input';\r\nimport { Row } from 'components/Layout';\r\nimport { useDBState } from 'context/DBContext';\r\nimport localforage from 'localforage';\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { CenterText } from 'styled/GlobalStyle';\r\nimport { DashboardContainer, GridContainer } from './styled';\r\n\r\nconst Dashboard = () => {\r\n  const history = useHistory();\r\n  const { categories, meta } = useDBState();\r\n  const [income, setIncome] = useState('0');\r\n\r\n  const monthlyExpenses = useMemo(() => {\r\n    let expenses = 0;\r\n    Object.values(meta).forEach(({ budget }) => {\r\n      expenses += budget;\r\n    });\r\n    return expenses;\r\n  }, [meta]);\r\n\r\n  useEffect(() => {\r\n    localforage.setItem('income', +income);\r\n  }, [income]);\r\n\r\n  useEffect(() => {\r\n    localforage\r\n      .getItem('income')\r\n      .then(_income => setIncome(String(_income || '0')));\r\n  }, []);\r\n\r\n  return (\r\n    <DashboardContainer>\r\n      <GridContainer>\r\n        {Object.keys(categories).length ? (\r\n          <CategoryGrid />\r\n        ) : (\r\n          <CenterText>No categories</CenterText>\r\n        )}\r\n      </GridContainer>\r\n      <div style={{ backgroundColor: 'white' }}>\r\n        <Row style={{ padding: '0.5rem', paddingBottom: 0 }}>\r\n          <Input\r\n            row\r\n            type=\"number\"\r\n            label=\"Income\"\r\n            value={income}\r\n            onChange={event => {\r\n              setIncome(event.target.value);\r\n            }}\r\n          />\r\n        </Row>\r\n        <Row style={{ padding: '0.5rem', paddingBottom: 0 }}>\r\n          <div style={{ flex: 1 }}>Monthly expenses:</div>\r\n          <div style={{ flex: 1, textAlign: 'right' }}>{monthlyExpenses}</div>\r\n        </Row>\r\n        <Row style={{ padding: '0.5rem', paddingBottom: 0 }}>\r\n          <div style={{ flex: 1 }}>Monthly savings:</div>\r\n          <div style={{ flex: 1, textAlign: 'right' }}>\r\n            {income - monthlyExpenses}\r\n          </div>\r\n        </Row>\r\n        <Row style={{ padding: '0.5rem' }}>Version: 0.0.3</Row>\r\n      </div>\r\n      <Row>\r\n        <Button onClick={() => history.push('/category')} style={{ flex: 1 }}>\r\n          Add Category\r\n        </Button>\r\n        <Button\r\n          onClick={() => history.push('/transactions')}\r\n          style={{ flex: 1, backgroundColor: '#66BB6A' }}\r\n        >\r\n          Transactions\r\n        </Button>\r\n      </Row>\r\n    </DashboardContainer>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import { useEffect, useRef } from 'react';\r\n\r\n// https://usehooks.com/usePrevious/\r\nconst usePrevious = value => {\r\n  // The ref object is a generic container whose current property is mutable ...\r\n  // ... and can hold any value, similar to an instance property on a class\r\n  const ref = useRef(value);\r\n\r\n  // Store current value in ref\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]); // Only re-run if value changes\r\n\r\n  // Return previous value (happens before update in useEffect above)\r\n  return ref.current;\r\n};\r\n\r\nexport default usePrevious;\r\n","import styled from 'styled-components/macro';\r\n\r\nexport const BudgetPageContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const BudgetForm = styled.form`\r\n  padding: 0.5rem;\r\n  background-color: #f5f5f5;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  form {\r\n    flex: 1;\r\n  }\r\n`;\r\n","import BackButton from 'components/BackButton';\r\nimport Button from 'components/Button';\r\nimport Input from 'components/Input';\r\nimport { convertData, useDBDispatch, useDBState } from 'context/DBContext';\r\nimport { addMonths, format } from 'date-fns';\r\nimport { isAfter } from 'date-fns/esm';\r\nimport { useFormik } from 'formik';\r\nimport usePrevious from 'hooks/usePrevious';\r\nimport localforage from 'localforage';\r\nimport React, { useEffect } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport uuid from 'uuid/v4';\r\nimport { BudgetForm, BudgetPageContainer } from './styled';\r\n\r\nconst NewBudget = () => {\r\n  const history = useHistory();\r\n  const params = useParams();\r\n  const { categories } = useDBState();\r\n  const dispatch = useDBDispatch();\r\n\r\n  const category = categories[params.categoryId];\r\n  const prevCategory = usePrevious(category);\r\n\r\n  const { values, handleChange, handleSubmit, setFieldValue } = useFormik({\r\n    initialValues: { date: format(new Date(), 'yyyy-MM'), amount: '' },\r\n    onSubmit: data => {\r\n      if (isAfter(new Date(data.date), new Date())) {\r\n        return alert('Cannot assign budget to date before today');\r\n      }\r\n      const existing = Object.values(category.budgets).find(\r\n        budget => format(new Date(budget.date), 'yyyy-MM') === data.date\r\n      );\r\n\r\n      if (existing) {\r\n        alert('Budget for that month already exists');\r\n      } else {\r\n        const id = uuid();\r\n        localforage\r\n          .setItem('categories', {\r\n            ...categories,\r\n            [params.categoryId]: {\r\n              ...category,\r\n              budgets: {\r\n                ...category.budgets,\r\n                [id]: {\r\n                  id,\r\n                  date: new Date(data.date),\r\n                  amount: data.amount,\r\n                },\r\n              },\r\n            },\r\n          })\r\n          .then(_categories => {\r\n            convertData(_categories, dispatch);\r\n            history.goBack();\r\n          });\r\n      }\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!prevCategory && !!category) {\r\n      let lastBudget = null;\r\n      for (const id in category.budgets) {\r\n        const budget = category.budgets[id];\r\n        if (!lastBudget) lastBudget = budget;\r\n        if (new Date(budget.date) < new Date(lastBudget.date)) {\r\n          lastBudget = budget;\r\n        }\r\n      }\r\n\r\n      if (new Date(values.date) < new Date(lastBudget.date)) {\r\n        setFieldValue(format(addMonths(new Date(lastBudget.date)), 'yyyy-MM'));\r\n      }\r\n    }\r\n  }, [category, prevCategory, setFieldValue, values.date]);\r\n\r\n  return (\r\n    <BudgetPageContainer>\r\n      <BudgetForm>\r\n        <BackButton />\r\n        <Input\r\n          type=\"month\"\r\n          label=\"Month\"\r\n          name=\"date\"\r\n          value={values.date}\r\n          onChange={event => {\r\n            event.persist();\r\n            const value = event.target.value;\r\n            const existing = Object.keys(category.budgets).find(\r\n              id =>\r\n                format(new Date(category.budgets[id].date), 'yyyy-MM') === value\r\n            );\r\n            if (existing) {\r\n              alert('Budget for that month already allocated');\r\n            } else {\r\n              handleChange(event);\r\n            }\r\n          }}\r\n        />\r\n        <Input\r\n          type=\"number\"\r\n          label=\"Amount\"\r\n          name=\"amount\"\r\n          value={values.amount}\r\n          onChange={handleChange}\r\n        />\r\n      </BudgetForm>\r\n      <Button type=\"button\" onClick={handleSubmit} style={{ width: '100%' }}>\r\n        Add Budget\r\n      </Button>\r\n    </BudgetPageContainer>\r\n  );\r\n};\r\n\r\nexport default NewBudget;\r\n","import styled from 'styled-components/macro';\r\n\r\nexport const TransactionPageContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const TransactionForm = styled.form`\r\n  padding: 0.5rem;\r\n  background-color: #f5f5f5;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  form {\r\n    flex: 1;\r\n  }\r\n`;\r\n","import BackButton from 'components/BackButton';\r\nimport Button from 'components/Button';\r\nimport Input from 'components/Input';\r\nimport { convertData, useDBDispatch, useDBState } from 'context/DBContext';\r\nimport { useFormik } from 'formik';\r\nimport localforage from 'localforage';\r\nimport React from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport uuid from 'uuid/v4';\r\nimport { TransactionForm, TransactionPageContainer } from './styled';\r\n\r\nexport const NewTransaction = () => {\r\n  const history = useHistory();\r\n  const params = useParams();\r\n  const { categories } = useDBState();\r\n  const dispatch = useDBDispatch();\r\n\r\n  const category = categories[params.id] || {};\r\n\r\n  const { values, handleChange, handleSubmit } = useFormik({\r\n    initialValues: { amount: '', description: '' },\r\n    onSubmit: data => {\r\n      const id = uuid();\r\n      localforage\r\n        .setItem('categories', {\r\n          ...categories,\r\n          [params.id]: {\r\n            ...category,\r\n            transactions: [\r\n              ...category.transactions,\r\n              {\r\n                id,\r\n                amount: +data.amount,\r\n                description: data.description,\r\n                date: new Date(),\r\n              },\r\n            ],\r\n          },\r\n        })\r\n        .then(_categories => {\r\n          convertData(_categories, dispatch);\r\n          history.goBack();\r\n        });\r\n    },\r\n  });\r\n\r\n  return (\r\n    <TransactionPageContainer>\r\n      <TransactionForm>\r\n        <BackButton />\r\n\r\n        <p style={{ marginBottom: '1rem' }}>\r\n          Transaction under{' '}\r\n          <span style={{ fontWeight: 'bold' }}>{category.name}</span>\r\n        </p>\r\n        <Input\r\n          label=\"Amount\"\r\n          type=\"number\"\r\n          name=\"amount\"\r\n          value={values.amount}\r\n          onChange={handleChange}\r\n          autoFocus\r\n        />\r\n        <Input\r\n          label=\"Description\"\r\n          name=\"description\"\r\n          value={values.description}\r\n          onChange={handleChange}\r\n        />\r\n      </TransactionForm>\r\n      <Button type=\"button\" onClick={handleSubmit}>\r\n        Add Transaction\r\n      </Button>\r\n    </TransactionPageContainer>\r\n  );\r\n};\r\n","import styled from 'styled-components/macro';\r\n\r\nexport const TransactionsContainer = styled.div`\r\n  padding: 1rem 0.5rem;\r\n  background-color: white;\r\n  height: 100%;\r\n  overflow-y: auto;\r\n\r\n  h6 {\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`;\r\n\r\nexport const TransactionsTable = styled.table`\r\n  width: 100%;\r\n\r\n  td {\r\n    padding: 0.5rem;\r\n  }\r\n`;\r\n","import BackButton from 'components/BackButton';\r\nimport { convertData, useDBDispatch, useDBState } from 'context/DBContext';\r\nimport { format } from 'date-fns';\r\nimport { startOfDay } from 'date-fns/esm';\r\nimport localforage from 'localforage';\r\nimport React, { Fragment, useCallback, useMemo } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { TransactionsContainer, TransactionsTable } from './styled';\r\n\r\nexport const Transactions = () => {\r\n  const { id } = useParams();\r\n  const { categories } = useDBState();\r\n  const dispatch = useDBDispatch();\r\n\r\n  const category = categories[id] || { transactions: [] };\r\n\r\n  const transactionsPerDay = useMemo(() => {\r\n    const transactionsMap = {};\r\n\r\n    for (const transaction of category.transactions) {\r\n      const day = startOfDay(new Date(transaction.date));\r\n      if (transactionsMap[day] === undefined) {\r\n        transactionsMap[day] = [];\r\n      }\r\n      transactionsMap[day].push(transaction);\r\n    }\r\n\r\n    return Object.keys(transactionsMap)\r\n      .sort((a, b) => new Date(b) - new Date(a))\r\n      .map(date => {\r\n        let totalAmount = 0;\r\n\r\n        for (const transaction of transactionsMap[date]) {\r\n          totalAmount += transaction.amount;\r\n        }\r\n\r\n        return {\r\n          date,\r\n          transactions: transactionsMap[date].sort(\r\n            (a, b) => new Date(b.date) - new Date(a.date)\r\n          ),\r\n          totalAmount,\r\n        };\r\n      });\r\n  }, [category.transactions]);\r\n\r\n  const handleDeleteTransaction = useCallback(\r\n    transactionId => {\r\n      if (window.confirm('Delete this transaction?')) {\r\n        localforage\r\n          .setItem('categories', {\r\n            ...categories,\r\n            [id]: {\r\n              ...category,\r\n              transactions: category.transactions.filter(\r\n                transaction => transactionId !== transaction.id\r\n              ),\r\n            },\r\n          })\r\n          .then(_categories => {\r\n            convertData(_categories, dispatch);\r\n          });\r\n      }\r\n    },\r\n    [categories, category, dispatch, id]\r\n  );\r\n\r\n  return (\r\n    <TransactionsContainer>\r\n      <BackButton />\r\n      <h6>Category - {category.name}</h6>\r\n      <TransactionsTable>\r\n        <tbody>\r\n          {transactionsPerDay.map(data => (\r\n            <Fragment key={data.date}>\r\n              <tr\r\n                style={{\r\n                  paddingTop: '1rem',\r\n                  borderBottom: '1px solid #e0e0e0',\r\n                }}\r\n              >\r\n                <td colSpan={2} style={{ fontWeight: 'bold' }}>\r\n                  {format(new Date(data.date), 'MMM d')}\r\n                </td>\r\n                <td style={{ textAlign: 'right', fontWeight: 'bold' }}>\r\n                  {data.totalAmount}\r\n                </td>\r\n              </tr>\r\n              {data.transactions.map((transaction, index) => (\r\n                <tr\r\n                  style={{\r\n                    backgroundColor: index % 2 === 0 ? 'white' : '#e0e0e0',\r\n                  }}\r\n                  key={transaction.id}\r\n                  onClick={() => handleDeleteTransaction(transaction.id)}\r\n                >\r\n                  <td>{format(transaction.date, 'HH:mm')}</td>\r\n                  <td>{transaction.description || '—'}</td>\r\n                  <td style={{ textAlign: 'right' }}>{transaction.amount}</td>\r\n                </tr>\r\n              ))}\r\n            </Fragment>\r\n          ))}\r\n        </tbody>\r\n      </TransactionsTable>\r\n    </TransactionsContainer>\r\n  );\r\n};\r\n","import styled from 'styled-components/macro';\r\n\r\nexport const TransactionsContainer = styled.div`\r\n  padding: 1rem 0.5rem;\r\n  background-color: white;\r\n  height: 100%;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  h6 {\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`;\r\n\r\nexport const TransactionsTable = styled.table`\r\n  width: 100%;\r\n\r\n  td {\r\n    padding: 0.25rem 0;\r\n  }\r\n`;\r\n","import BackButton from 'components/BackButton';\r\nimport Button from 'components/Button';\r\nimport Input from 'components/Input';\r\nimport { Row } from 'components/Layout';\r\nimport { convertData, useDBDispatch, useDBState } from 'context/DBContext';\r\nimport { addDays, format, isSameDay } from 'date-fns';\r\nimport { startOfDay } from 'date-fns/esm';\r\nimport localforage from 'localforage';\r\nimport React, { useCallback, useMemo, useState } from 'react';\r\nimport { TransactionsContainer, TransactionsTable } from './styled';\r\n\r\nexport const TransactionsDay = () => {\r\n  const { categories } = useDBState();\r\n  const dispatch = useDBDispatch();\r\n\r\n  const [date, setDate] = useState(String(startOfDay(new Date())));\r\n\r\n  const transactionsInDate = useMemo(() => {\r\n    const transactions = [];\r\n    Object.values(categories).forEach(category => {\r\n      category.transactions.forEach(transaction => {\r\n        if (isSameDay(startOfDay(transaction.date), new Date(date))) {\r\n          transactions.push({\r\n            ...transaction,\r\n            categoryName: category.name,\r\n            categoryId: category.id,\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    return transactions.sort((a, b) => b.date - a.date);\r\n  }, [categories, date]);\r\n\r\n  const handleDeleteTransaction = useCallback(\r\n    transaction => {\r\n      if (window.confirm('Delete this transaction?')) {\r\n        const category = categories[transaction.categoryId];\r\n\r\n        localforage\r\n          .setItem('categories', {\r\n            ...categories,\r\n            [category.id]: {\r\n              ...category,\r\n              transactions: category.transactions.filter(\r\n                _transaction => _transaction.id !== transaction.id\r\n              ),\r\n            },\r\n          })\r\n          .then(_categories => {\r\n            convertData(_categories, dispatch);\r\n          });\r\n      }\r\n    },\r\n    [categories, dispatch]\r\n  );\r\n\r\n  return (\r\n    <TransactionsContainer>\r\n      <BackButton />\r\n      <Input\r\n        label=\"Date\"\r\n        type=\"date\"\r\n        value={format(new Date(date), 'yyyy-MM-dd')}\r\n        onChange={event => {\r\n          setDate(event.target.value);\r\n        }}\r\n      />\r\n      <div style={{ flex: 1, overflowY: 'auto' }}>\r\n        <TransactionsTable>\r\n          <tbody>\r\n            {transactionsInDate.map(transaction => (\r\n              <tr\r\n                key={transaction.id}\r\n                onClick={() => handleDeleteTransaction(transaction)}\r\n              >\r\n                <td>{transaction.categoryName}</td>\r\n                <td>{transaction.description || '—'}</td>\r\n                <td style={{ textAlign: 'right' }}>{transaction.amount}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </TransactionsTable>\r\n      </div>\r\n      <Row style={{ marginTop: '1rem' }}>\r\n        <Button\r\n          style={{ flex: 1, marginRight: '1rem' }}\r\n          onClick={() => {\r\n            setDate(String(addDays(new Date(date), 1)));\r\n          }}\r\n        >\r\n          Next\r\n        </Button>\r\n        <Button\r\n          style={{ flex: 1 }}\r\n          onClick={() => {\r\n            setDate(String(addDays(new Date(date), -1)));\r\n          }}\r\n        >\r\n          Previous\r\n        </Button>\r\n      </Row>\r\n    </TransactionsContainer>\r\n  );\r\n};\r\n","import { DBContextProvider } from 'context/DBContext';\r\nimport Budget from 'pages/Budget';\r\nimport Category from 'pages/Category';\r\nimport NewCategory from 'pages/Category/NewCategory';\r\nimport Dashboard from 'pages/Dashboard';\r\nimport NewBudget from 'pages/NewBudget';\r\nimport { NewTransaction } from 'pages/NewTransaction';\r\nimport { Transactions } from 'pages/Transactions';\r\nimport { TransactionsDay } from 'pages/TransactionsDay';\r\nimport React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Redirect,\r\n  Route,\r\n  Switch,\r\n} from 'react-router-dom';\r\nimport GlobalStyle from 'styled/GlobalStyle';\r\n\r\nconst AppRouter = () => {\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <DBContextProvider>\r\n        <Router>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Dashboard} />\r\n            <Route exact path=\"/category\" component={NewCategory} />\r\n            <Route exact path=\"/category/:id\" component={Category} />\r\n            <Route\r\n              exact\r\n              path=\"/category/:categoryId/budget/\"\r\n              component={NewBudget}\r\n            />\r\n            <Route\r\n              exact\r\n              path=\"/category/:categoryId/budget/:budgetId\"\r\n              component={Budget}\r\n            />\r\n            <Route\r\n              exact\r\n              path=\"/category/:id/transaction\"\r\n              component={NewTransaction}\r\n            />\r\n            <Route\r\n              exact\r\n              path=\"/category/:id/transactions\"\r\n              component={Transactions}\r\n            />\r\n            <Route exact path=\"/transactions\" component={TransactionsDay} />\r\n            <Redirect to=\"/\" />\r\n          </Switch>\r\n        </Router>\r\n      </DBContextProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'destyle.css';\r\nimport localforage from 'localforage';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport AppRouter from './AppRouter';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nlocalforage.config({ name: 'Greevil DB' });\r\n\r\nReactDOM.render(<AppRouter />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}